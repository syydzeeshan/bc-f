//Practical 1
//Aim: Implement Naive Blockchain construction
const SHA26 = require('crypto-js/sha256')
class Block{
constructor(index , timestapms , data , previousHash = ''){
this.index = index;
this.timestapms = timestapms;
this.data = data;
this.previousHash = previousHash;
this.hash = this.calculateHash();
}
calculateHash(){
return SHA26(this.index + this.previousHash + this.timestapms +
JSON.stringify(this.data)).toString();
} }
class Blockchain{
constructor(){
this.chain = [this.createGenesisisBlock()];
}
createGenesisisBlock(){
return new Block(0, "01/01/2022", "Genesis Block","0");
}
getLatestBlock(){
return this.chain[this.chain.length - 1]
}
addBlock(newBlock){
newBlock.previousHash = this.getLatestBlock().hash;
newBlock.hash = newBlock.calculateHash();
this.chain.push(newBlock);}
ischainValid(){
for(let i = 1; i < this.chain.length; i++){
const currentBlock = this.chain[i];
const previousBlock = this.chain[i-1];
if(currentBlock.hash !== currentBlock.calculateHash()){
return false;
}
if(currentBlock.previousHash !== previousBlock.hash){
return false;
} }
return true;
} }
let ZeeCoin = new Blockchain();
ZeeCoin.addBlock(new Block(1,"08/08/2022",{amount : 4}));
ZeeCoin.addBlock(new Block(2,"09/09/2022",{amount : 10}));
console.log("is Block chain Valid ? " + ZeeCoin.ischainValid());
console.log("Block Chain Created :\n",JSON.stringify(ZeeCoin, null , 4));
console.log("~By Zeeshan Sayyad 051");
//ZeeCoin.chain[1].data = { amount: 100}; // tampering the data to check block
chain Validity
//console.log("is Block chain Valid ? " + ZeeCoin.ischainValid())




//Practical 2
//Aim: Implement Direct Acyclic Graph.
//
class AjlistNode
{
constructor(id)
{
// Set value of node key
this.id = id;
this.next = null;
}
}
class Vertices
{
constructor(data)
{
this.data = data;
this.next = null;
this.last = null;
}
}
class Graph
{
constructor(size)
{
// Set value
this.size = size;
this.node = Array(size).fill(null);
this.setData();
}
// Set initial node value
setData()
{
if (this.size <= 0)
{
console.log("\nEmpty Graph");
}
else
{
for (var index = 0; index < this.size; index++)
{
// Set initial node value
this.node[index] = new Vertices(index);
}
}
}
connection(start, last)
{
// Safe connection
var edge = new AjlistNode(last);
if (this.node[start].next == null)
{
    this.node[start].next = edge;
    }
    else
    {
    // Add edge at the end
    this.node[start].last.next = edge;
    }
    // Get last edge
    this.node[start].last = edge;
    }
    // Handling the request of adding new edge
    addEdge(start, last)
    {
    if (start >= 0 && start < this.size &&
    last >= 0 && last < this.size)
    {
    this.connection(start, last);
    }
    else
    {
    // When invalid nodes
    console.log("\nHere Something Wrong");
    }
    }
    printGraph()
    {
    if (this.size > 0)
    {
    // Print graph ajlist Node value
    for (var index = 0; index < this.size; ++index)
    {
    process.stdout.write("\nAdjacency list of vertex " +
    index + " :");
    var edge = this.node[index].next;
    while (edge != null)
    {
    // Display graph node
    process.stdout.write(" " +
    this.node[edge.id].data);
    // Visit to next edge
    edge = edge.next;
    }
    }
    }
    }
    // Find indegree of each nodes of a given graph
    // Find the incoming edges of each node
    findIndegree(indegree)
{
if (this.size <= 0)
{
return;
}
var edge = null;
for (var i = 0; i < this.size; ++i)
{
edge = this.node[i].next;
while (edge != null)
{
// Increase indegree of node
indegree[edge.id]++;
// Visit to next edge
edge = edge.next;
}
}
}
findSequence(indegree, visit, index, result)
{
if (index == this.size)
{
// Display result
process.stdout.write("\n");
var j = 0;
while (j < this.size)
{
process.stdout.write(" " + result[j]);
j++;
}
return;
}
var edge = null;
var i = 0;
while (i < this.size)
{
if (indegree[i] == 0 && visit[i] == false)
{
visit[i] = true;
result[index] = i;
// Get node edge
edge = this.node[i].next;
// Reduce indegree
while (edge != null)
{
indegree[edge.id]--;
// Visit to next edge
edge = edge.next;
}
this.findSequence(indegree,
visit,
index + 1,
result);
visit[i] = false;
edge = this.node[i].next;
// Increase indegree
while (edge != null)
{
indegree[edge.id]++;
edge = edge.next;
}
} i++;
}
}
topologicalSort()
{
if (this.size <= 0)
{
return;
}
// Use to track node
var visit = Array(this.size).fill(false);
// Store indegree of node edges
var indegree = Array(this.size).fill(0);
// Store result of topological sort
var result = Array(this.size).fill(-1);
// Find indegree of each node in graph
this.findIndegree(indegree);
process.stdout.write("\n");
this.findSequence(indegree, visit, 0, result);
}
}
function main()
{
// 6 implies the number of nodes in graph
var g = new Graph(6);
// Connect node with an edge
// First and second parameter indicate node index
g.addEdge(1, 0);
g.addEdge(1, 4);
g.addEdge(1, 5);
g.addEdge(2, 0);
g.addEdge(2, 4);
g.addEdge(2, 5);
g.addEdge(3, 4);
g.addEdge(3, 5);
g.addEdge(5, 4);
// Print graph element
g.printGraph();
g.topologicalSort();
}
// Start program execution
main();
console.log("");
console.log("~By Zeeshan Sayyad 051");


//Practical 4
//Aim: Solve Mining puzzles
const SHA26 = require('crypto-js/sha256')
class Transaction {
constructor(fromAddress , toAddress , amount){
this.fromAddress = fromAddress;
this.toAddress = toAddress;
this.amount = amount;
} }
class Block{
constructor(timestapms , transaction , previousHash = ''){
this.timestapms = timestapms;
this.transaction = transaction;
this.previousHash = previousHash;
this.hash = this.calculateHash();
this.nounce = 0;
}
calculateHash(){
return SHA26(this.index + this.previousHash + this.timestapms +
JSON.stringify(this.data) + this.nounce).toString();
}
mineBlock(difficulty){
while(this.hash.substring(0,difficulty) !== Array(difficulty + 1).join("0")){
this.nounce++;
this.hash = this.calculateHash();
}
console.log("Block mined :" + this.hash);
} }
class Blockchain{
constructor(){
this.chain = [this.createGenesisisBlock()];
this.difficulty = 2;
this.pendingTransaction = [];
this.miningReward = 100;
}
createGenesisisBlock(){
return new Block("05/09/2022", "Genesis Block","0");
}getLatestBlock(){
return this.chain[this.chain.length - 1]
}
minePendingTransactions(miningRewardAdress){
let block = new Block(Date.now() , this.pendingTransaction);
block.mineBlock(this.difficulty);
console.log("Block successfully mined !");
this.chain.push(block);
this.pendingTransaction = [
new Transaction(null,miningRewardAdress,this.miningReward)
];
}
creatTransaction(transaction){
this.pendingTransaction.push(transaction);
}
getBalanceOfAddress(address){
let balance = 0;
for(const block of this.chain){
for(const trans of block.transaction){
if(trans.fromAddress === address){
balance -= trans.amount;
}
if(trans.toAddress == address){
balance +=trans.amount;
} } }
return balance;
} }
let ZeeCoin = new Blockchain();
ZeeCoin.creatTransaction(new Transaction('address1', 'address2',100));
ZeeCoin.creatTransaction(new Transaction('address2', 'address1',50));
console.log("\n satrting the miner....");
ZeeCoin.minePendingTransactions('Zeeshan\'s-address');console.log('\nBalanceof Zeeshan is ',ZeeCoin.getBalanceOfAddress('Zeeshan\'s address'));
console.log("\n satrting the miner again....");
ZeeCoin.minePendingTransactions('Zeeshan\'s-address');
console.log('\nBalance of Zeeshan is',ZeeCoin.getBalanceOfAddress('Zeeshan\'s-address'));
console.log("~By Zeeshan Sayyad 051");


//Practical 5
//Aim: Implement Public Key Cryptosystems
const crypto = require("crypto");
// The `generateKeyPairSync` method accepts two arguments:
// 1. The type ok keys we want, which in this case is "rsa"
// 2. An object with the properties of the key
const { publicKey, privateKey } = crypto.generateKeyPairSync("rsa", {
// The standard secure default length for RSA keys is 2048 bits
modulusLength: 2048,
});
// use the public and private keys
// ...
// This is the data we want to encrypt
const data = "my name is zeeshan";
const encryptedData = crypto.publicEncrypt(
{
key: publicKey,
padding: crypto.constants.RSA_PKCS1_OAEP_PADDING,
oaepHash: "sha256",
},
// We convert the data string to a buffer using `Buffer.from`
Buffer.from(data)
);
// The encrypted data is in the form of bytes, so we print it in base64 format
// so that it's displayed in a more readable form
console.log("encypted data: ", encryptedData.toString("base64"));
const decryptedData = crypto.privateDecrypt(
{
key: privateKey,
// In order to decrypt the data, we need to specify the
// same hashing function and padding scheme that we used to
// encrypt the data in the previous step
padding: crypto.constants.RSA_PKCS1_OAEP_PADDING,
oaepHash: "sha256",
},
encryptedData
);
// The decrypted data is of the Buffer type, which we can convert to a
// string to reveal the original data
console.log("decrypted data: ", decryptedData.toString());
// Create some sample data that we want to sign
const verifiableData = "this need to be verified";
// The signature method takes the data we want to sign, the
// hashing algorithm, and the padding scheme, and generates
// a signature in the form of bytes
const signature = crypto.sign("sha256", Buffer.from(verifiableData), {
key: privateKey,
padding: crypto.constants.RSA_PKCS1_PSS_PADDING,
});
console.log(signature.toString("base64"));
// To verify the data, we provide the same hashing algorithm and
// padding scheme we provided to generate the signature, along
// with the signature itself, the data that we want to
// verify against the signature, and the public key
const isVerified = crypto.verify(
"sha256",
Buffer.from(verifiableData),
{
key: publicKey,
padding: crypto.constants.RSA_PKCS1_PSS_PADDING,
},
signature
);
// isVerified should be `true` if the signature is valid
console.log("signature verified: ", isVerified);


//Practical 6
//Aim: Demonstrate cryptocurrency transaction processing
const SHA26 = require('crypto-js/sha256')
class Block{
constructor(index , timestapms , data , previousHash = ''){
this.index = index;
this.timestapms = timestapms;
this.data = data;
this.previousHash = previousHash;
this.hash = this.calculateHash();
this.nounce = 0;
}
calculateHash(){
return SHA26(this.index + this.previousHash + this.timestapms +
JSON.stringify(this.data) + this.nounce).toString();}
mineBlock(difficulty){
while(this.hash.substring(0,difficulty) !== Array(difficulty + 1).join("0")){
this.nounce++;
this.hash = this.calculateHash();
}
console.log("Block mined :" + this.hash);
} }
class Blockchain{
constructor(){
this.chain = [this.createGenesisisBlock()];
this.difficulty = 4;
}
createGenesisisBlock(){
return new Block(0, "09/09/2022", "Genesis Block","0");
}
getLatestBlock(){
return this.chain[this.chain.length - 1]
}
addBlock(newBlock){
newBlock.previousHash = this.getLatestBlock().hash;
newBlock.mineBlock(this.difficulty);
this.chain.push(newBlock);
} }
let ZeeCoin = new Blockchain();
console.log("mining block 1..");
ZeeCoin.addBlock(new Block(1,"18/09/2021",{amount : 4}));
console.log("mining block 2..");
ZeeCoin.addBlock(new Block(2,"28/09/2021",{amount : 8}));
console.log("~By Zeeshan Sayyad 051");